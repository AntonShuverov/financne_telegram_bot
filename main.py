import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, CallbackQueryHandler, Filters, CallbackContext
from dotenv import load_dotenv
from database import db
from ai_parser import ai_parser

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

def start(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user = update.effective_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    db.add_user(user.id, user.username, user.first_name)
    db.add_default_categories(user.id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥—ã", callback_data='expenses')],
        [InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥—ã", callback_data='income')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton("ü§ñ –ü–æ–º–æ—â—å", callback_data='help')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    welcome_message = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ —Å –ò–ò.

üìù –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –º–Ω–µ –æ —Å–≤–æ–∏—Ö —Ç—Ä–∞—Ç–∞—Ö –æ–±—ã—á–Ω—ã–º —è–∑—ã–∫–æ–º:
‚Ä¢ "–∫—É–ø–∏–ª –∫–æ—Ñ–µ 800 —Ç–≥"
‚Ä¢ "–ø–æ—Ç—Ä–∞—Ç–∏–ª 5000 –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∫–∞—Å–ø–∏"
‚Ä¢ "–ø–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 350000"

–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Å—É–º–º—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –±–∞–Ω–∫–∏! üí∏
"""
    
    update.message.reply_text(welcome_message, reply_markup=reply_markup)

def handle_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ò–ò"""
    user_message = update.message.text
    user_id = update.effective_user.id
    
    print(f"üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")
    
    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ò–ò
    parsed_data = ai_parser.parse_transaction(user_message)
    
    if parsed_data["success"] and parsed_data["amount"] is not None:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑—É
        transaction_id = db.add_transaction(
            user_id=user_id,
            amount=parsed_data["amount"],
            currency=parsed_data["currency"],
            category=parsed_data["category"],
            description=parsed_data["description"],
            bank=parsed_data["bank"],
            transaction_type=parsed_data["type"]
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        transaction_type = "üí∞ –î–æ—Ö–æ–¥" if parsed_data["type"] == "income" else "üí∏ –†–∞—Å—Ö–æ–¥"
        bank_info = f" ({parsed_data['bank']})" if parsed_data['bank'] else ""
        
        response = f"""‚úÖ –î–æ–±–∞–≤–∏–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:

{transaction_type}: {parsed_data['amount']} {parsed_data['currency']}
üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {parsed_data['category']}
üìù –û–ø–∏—Å–∞–Ω–∏–µ: {parsed_data['description']}{bank_info}
üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {parsed_data['confidence']:.0%}

ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_id}"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        update.message.reply_text(response, reply_markup=reply_markup)
        
    elif parsed_data["success"] and parsed_data["amount"] is None:
        # –ò–ò –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É
        response = f"""ü§î –Ø –ø–æ–Ω—è–ª, —á—Ç–æ —ç—Ç–æ {parsed_data['category']}, –Ω–æ –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "–ø–æ—Ç—Ä–∞—Ç–∏–ª 2500 –Ω–∞ {parsed_data['category']}"
‚Ä¢ "–∫—É–ø–∏–ª {parsed_data['description']} –∑–∞ 1500 —Ç–≥"
"""
        update.message.reply_text(response)
        
    else:
        # –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        response = f"""‚ùå –ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫:
‚Ä¢ "–ø–æ—Ç—Ä–∞—Ç–∏–ª 2500 –Ω–∞ –∫–æ—Ñ–µ"
‚Ä¢ "–∫—É–ø–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã –∑–∞ 15000 —Ç–≥"
‚Ä¢ "–ø–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 400000"
‚Ä¢ "—Ç–∞–∫—Å–∏ –¥–æ–º–æ–π 1200 —Å –∫–∞—Å–ø–∏"

–û—à–∏–±–∫–∞: {parsed_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"""
        
        update.message.reply_text(response)

def button_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    
    if query.data == 'main_menu':
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥—ã", callback_data='expenses')],
            [InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥—ã", callback_data='income')],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("ü§ñ –ü–æ–º–æ—â—å", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)
        
    elif query.data == 'stats':
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        from datetime import datetime
        current_month = datetime.now().month
        current_year = datetime.now().year
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
        expense_stats = db.get_category_stats(user_id, current_month, current_year, "expense")
        income_stats = db.get_category_stats(user_id, current_month, current_year, "income")
        
        stats_text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {current_month}.{current_year}\n\n"
        
        if expense_stats:
            total_expenses = sum(stat['total'] for stat in expense_stats)
            stats_text += f"üí∏ –†–ê–°–•–û–î–´: {total_expenses:,.0f} —Ç–≥\n"
            for stat in expense_stats[:5]:  # –¢–æ–ø-5 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                stats_text += f"  üè∑Ô∏è {stat['category']}: {stat['total']:,.0f} —Ç–≥\n"
            stats_text += "\n"
        
        if income_stats:
            total_income = sum(stat['total'] for stat in income_stats)
            stats_text += f"üí∞ –î–û–•–û–î–´: {total_income:,.0f} —Ç–≥\n"
            for stat in income_stats[:3]:  # –¢–æ–ø-3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                stats_text += f"  üè∑Ô∏è {stat['category']}: {stat['total']:,.0f} —Ç–≥\n"
            stats_text += "\n"
        
        if expense_stats and income_stats:
            balance = sum(stat['total'] for stat in income_stats) - sum(stat['total'] for stat in expense_stats)
            balance_emoji = "üìà" if balance >= 0 else "üìâ"
            stats_text += f"{balance_emoji} –ë–ê–õ–ê–ù–°: {balance:,.0f} —Ç–≥"
        
        if not expense_stats and not income_stats:
            stats_text += "–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.\n–ù–∞–ø–∏—à–∏—Ç–µ –æ —Å–≤–æ–∏—Ö —Ç—Ä–∞—Ç–∞—Ö, –∏ —è –∏—Ö —Å–æ—Ö—Ä–∞–Ω—é!"
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(stats_text, reply_markup=reply_markup)
        
    elif query.data == 'help':
        help_text = """ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

üìù –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ê–¢:
–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —è–∑—ã–∫–æ–º:
‚Ä¢ "–ø–æ—Ç—Ä–∞—Ç–∏–ª 2500 –Ω–∞ –∫–æ—Ñ–µ"
‚Ä¢ "–∫—É–ø–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã 15000 —Ç–≥ —Å –∫–∞—Å–ø–∏"
‚Ä¢ "—Ç–∞–∫—Å–∏ –¥–æ–º–æ–π 1200"
‚Ä¢ "–ø–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 400000"

üéØ –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—é:
‚Ä¢ –°—É–º–º—É –∏ –≤–∞–ª—é—Ç—É
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—é (–µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∏ —Ç.–¥.)
‚Ä¢ –ë–∞–Ω–∫/–∫–∞—Ä—Ç—É
‚Ä¢ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)

üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
–ù–∞–∂–º–∏—Ç–µ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å:
‚Ä¢ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–æ—Ö–æ–¥—ã
‚Ä¢ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç—Ä–∞—Ç
‚Ä¢ –ë–∞–ª–∞–Ω—Å –∑–∞ –º–µ—Å—è—Ü

üöÄ –ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ —Å–æ –º–Ω–æ–π –∫–∞–∫ —Å –æ–±—ã—á–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º!"""
        
        keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        query.edit_message_text(help_text, reply_markup=reply_markup)

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    logging.warning(f'Update {update} caused error {context.error}')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ò–ò...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω—ã
    if not TELEGRAM_TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω Telegram –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    dp.add_handler(CallbackQueryHandler(button_callback))
    dp.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    updater.start_polling()
    print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("üí° –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –æ —Å–≤–æ–∏—Ö —Ç—Ä–∞—Ç–∞—Ö, –∏ –æ–Ω –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç!")
    updater.idle()

if __name__ == '__main__':
    main()