from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from database_extended import db
from datetime import datetime, timedelta
import calendar

def statistics_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º"""
    
    user_id = update.effective_user.id
    today = datetime.now().date()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    show_daily_statistics(update, context, user_id, today)

def show_daily_statistics(update, context, user_id: int, date):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å
    daily_transactions = db.get_transactions_by_date(user_id, date)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—ã
    total_expenses = sum(t['amount'] for t in daily_transactions if t['type'] == 'expense')
    total_income = sum(t['amount'] for t in daily_transactions if t['type'] == 'income')
    transfers = [t for t in daily_transactions if t['type'] == 'transfer']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_str = date.strftime("%d.%m.%Y")
    weekday = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'][date.weekday()]
    
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {weekday}, {date_str}:*\n\n"
    
    # –ë–∞–ª–∞–Ω—Å—ã –∫–∞—Ä—Ç
    balances = db.get_account_balances(user_id)
    if balances:
        message += "üí≥ *–¢–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã:*\n"
        for balance in balances:
            emoji = "üí≥" if "kaspi" in balance['account_name'].lower() or "halyk" in balance['account_name'].lower() else "üíµ"
            message += f"{emoji} {balance['account_name']}: {balance['balance']:,.0f} {balance['currency']}\n"
        message += "\n"
    
    # –î–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
    if total_income > 0:
        message += f"üí∞ *–î–æ—Ö–æ–¥—ã:* {total_income:,.0f} —Ç–≥\n"
    
    if total_expenses > 0:
        message += f"üí∏ *–†–∞—Å—Ö–æ–¥—ã:* {total_expenses:,.0f} —Ç–≥\n"
    
    if total_income > 0 or total_expenses > 0:
        balance = total_income - total_expenses
        emoji = "üìà" if balance >= 0 else "üìâ"
        message += f"{emoji} *–ë–∞–ª–∞–Ω—Å –¥–Ω—è:* {balance:+,.0f} —Ç–≥\n\n"
    
    # –ü–µ—Ä–µ–≤–æ–¥—ã
    if transfers:
        message += "üîÑ *–ü–µ—Ä–µ–≤–æ–¥—ã:*\n"
        for transfer in transfers:
            message += f"‚Ä¢ {transfer['description']}: {transfer['amount']:,.0f} —Ç–≥\n"
        message += "\n"
    
    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞—Ç
    if daily_transactions:
        expenses = [t for t in daily_transactions if t['type'] == 'expense']
        income = [t for t in daily_transactions if t['type'] == 'income']
        
        if expenses:
            message += "üí∏ *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤:*\n"
            for trans in expenses:
                bank_info = f" ({trans['bank']})" if trans['bank'] else ""
                message += f"‚Ä¢ {trans['description']}: {trans['amount']:,.0f} —Ç–≥{bank_info}\n"
            message += "\n"
        
        if income:
            message += "üí∞ *–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Ö–æ–¥–æ–≤:*\n"
            for trans in income:
                bank_info = f" ({trans['bank']})" if trans['bank'] else ""
                message += f"‚Ä¢ {trans['description']}: {trans['amount']:,.0f} —Ç–≥{bank_info}\n"
            message += "\n"
    else:
        message += "üìù *–û–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–µ –±—ã–ª–æ*\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = create_date_navigation_keyboard(date)
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if hasattr(update, 'callback_query') and update.callback_query:
        update.callback_query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

def create_date_navigation_keyboard(current_date):
    """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –¥–∞—Ç–∞–º"""
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–Ω—è–º
    prev_day = current_date - timedelta(days=1)
    next_day = current_date + timedelta(days=1)
    today = datetime.now().date()
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–Ω–µ–π
    day_row = []
    day_row.append(InlineKeyboardButton(
        f"‚Üê {prev_day.strftime('%d.%m')}", 
        callback_data=f"stats_day_{prev_day.strftime('%Y-%m-%d')}"
    ))
    
    if current_date != today:
        day_row.append(InlineKeyboardButton(
            "üìÖ –°–µ–≥–æ–¥–Ω—è", 
            callback_data=f"stats_day_{today.strftime('%Y-%m-%d')}"
        ))
    else:
        day_row.append(InlineKeyboardButton(
            "üìÖ –°–µ–≥–æ–¥–Ω—è ‚óè", 
            callback_data=f"stats_day_{today.strftime('%Y-%m-%d')}"
        ))
    
    day_row.append(InlineKeyboardButton(
        f"{next_day.strftime('%d.%m')} ‚Üí", 
        callback_data=f"stats_day_{next_day.strftime('%Y-%m-%d')}"
    ))
    
    keyboard.append(day_row)
    
    # –ö–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
    current_month = current_date.replace(day=1)
    prev_month = (current_month - timedelta(days=1)).replace(day=1)
    next_month = current_month.replace(day=28) + timedelta(days=4)
    next_month = next_month.replace(day=1)
    
    month_row = []
    month_row.append(InlineKeyboardButton(
        f"‚Üê {prev_month.strftime('%b')}",
        callback_data=f"stats_month_{prev_month.strftime('%Y-%m')}"
    ))
    
    month_row.append(InlineKeyboardButton(
        f"üìÖ {current_month.strftime('%B %Y')}",
        callback_data=f"stats_month_{current_month.strftime('%Y-%m')}"
    ))
    
    month_row.append(InlineKeyboardButton(
        f"{next_month.strftime('%b')} ‚Üí",
        callback_data=f"stats_month_{next_month.strftime('%Y-%m')}"
    ))
    
    keyboard.append(month_row)
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    filter_row = []
    filter_row.append(InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—è", callback_data="stats_week"))
    filter_row.append(InlineKeyboardButton("üìà –ú–µ—Å—è—Ü", callback_data="stats_month_summary"))
    filter_row.append(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"stats_day_{current_date.strftime('%Y-%m-%d')}"))
    
    keyboard.append(filter_row)
    
    return keyboard

def stats_day_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–Ω—è"""
    
    query = update.callback_query
    query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
    date_str = query.data.split('_')[2]  # stats_day_2025-09-07
    date = datetime.strptime(date_str, '%Y-%m-%d').date()
    
    user_id = update.effective_user.id
    show_daily_statistics(update, context, user_id, date)

def stats_month_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ—Å—è—Ü–∞"""
    
    query = update.callback_query
    query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü –∏–∑ callback_data  
    month_str = query.data.split('_')[2]  # stats_month_2025-09
    year, month = map(int, month_str.split('-'))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    first_day = datetime(year, month, 1).date()
    
    user_id = update.effective_user.id
    show_daily_statistics(update, context, user_id, first_day)

def stats_week_callback(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"""
    
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    today = datetime.now().date()
    week_start = today - timedelta(days=today.weekday())
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
    week_transactions = []
    for i in range(7):
        day = week_start + timedelta(days=i)
        day_transactions = db.get_transactions_by_date(user_id, day)
        week_transactions.extend(day_transactions)
    
    total_expenses = sum(t['amount'] for t in week_transactions if t['type'] == 'expense')
    total_income = sum(t['amount'] for t in week_transactions if t['type'] == 'income')
    
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é*\n"
    message += f"({week_start.strftime('%d.%m')} - {(week_start + timedelta(days=6)).strftime('%d.%m')})\n\n"
    message += f"üí∞ –î–æ—Ö–æ–¥—ã: {total_income:,.0f} —Ç–≥\n"
    message += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {total_expenses:,.0f} —Ç–≥\n"
    message += f"üìà –ë–∞–ª–∞–Ω—Å: {total_income - total_expenses:+,.0f} —Ç–≥\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for trans in week_transactions:
        if trans['type'] == 'expense':
            cat = trans['category']
            categories[cat] = categories.get(cat, 0) + trans['amount']
    
    if categories:
        message += "üè∑Ô∏è *–ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
        for cat, amount in sorted(categories.items(), key=lambda x: x[1], reverse=True):
            percentage = (amount / total_expenses) * 100 if total_expenses > 0 else 0
            message += f"‚Ä¢ {cat}: {amount:,.0f} —Ç–≥ ({percentage:.1f}%)\n"
    
    keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –¥–Ω—è–º", callback_data=f"stats_day_{today.strftime('%Y-%m-%d')}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')

def stats_month_summary_callback(update: Update, context: CallbackContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º–µ—Å—è—Ü"""
    
    query = update.callback_query
    query.answer()
    
    user_id = update.effective_user.id
    today = datetime.now().date()
    month_start = today.replace(day=1)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
    month_stats = db.get_user_statistics(user_id, period_days=30)
    
    message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_start.strftime('%B %Y')}*\n\n"
    message += f"üí∞ –î–æ—Ö–æ–¥—ã: {month_stats['total_income']:,.0f} —Ç–≥\n"
    message += f"üí∏ –†–∞—Å—Ö–æ–¥—ã: {month_stats['total_expenses']:,.0f} —Ç–≥\n"
    message += f"üìà –ë–∞–ª–∞–Ω—Å: {month_stats['total_income'] - month_stats['total_expenses']:+,.0f} —Ç–≥\n\n"
    
    if month_stats['expenses_by_category']:
        message += "üè∑Ô∏è *–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:*\n"
        for cat_stat in month_stats['expenses_by_category']:
            percentage = (cat_stat['amount'] / month_stats['total_expenses']) * 100
            message += f"‚Ä¢ {cat_stat['category']}: {cat_stat['amount']:,.0f} —Ç–≥ ({percentage:.1f}%)\n"
    
    keyboard = [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –∫ –¥–Ω—è–º", callback_data=f"stats_day_{today.strftime('%Y-%m-%d')}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    query.edit_message_text(message, reply_markup=reply_markup, parse_mode='Markdown')