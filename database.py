import sqlite3
import os
from datetime import datetime
from typing import List, Dict, Optional

class FinanceDatabase:
    def __init__(self, db_path: str = "finance.db"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    timezone TEXT DEFAULT 'Asia/Almaty',
                    currency TEXT DEFAULT 'KZT',
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS transactions (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    date DATETIME,
                    amount REAL,
                    currency TEXT,
                    category TEXT,
                    description TEXT,
                    bank TEXT,
                    type TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS categories (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    name TEXT,
                    emoji TEXT,
                    type TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ü–µ–ª–µ–π
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS goals (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    name TEXT,
                    target_amount REAL,
                    current_amount REAL DEFAULT 0,
                    currency TEXT,
                    target_date DATE,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ª–∏–º–∏—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS limits (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    category TEXT,
                    monthly_limit REAL,
                    currency TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                )
            ''')
            
            conn.commit()
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def add_user(self, user_id: int, username: str = None, first_name: str = None):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, username, first_name)
                VALUES (?, ?, ?)
            ''', (user_id, username, first_name))
            conn.commit()
    
    def add_transaction(self, user_id: int, amount: float, currency: str, 
                       category: str, description: str, bank: str = None, 
                       transaction_type: str = "expense"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO transactions 
                (user_id, date, amount, currency, category, description, bank, type)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, datetime.now(), amount, currency, category, description, bank, transaction_type))
            conn.commit()
            return cursor.lastrowid
    
    def get_user_transactions(self, user_id: int, month: int = None, year: int = None) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if month and year:
                cursor.execute('''
                    SELECT * FROM transactions 
                    WHERE user_id = ? AND strftime('%m', date) = ? AND strftime('%Y', date) = ?
                    ORDER BY date DESC
                ''', (user_id, f"{month:02d}", str(year)))
            else:
                cursor.execute('''
                    SELECT * FROM transactions 
                    WHERE user_id = ?
                    ORDER BY date DESC
                ''', (user_id,))
            
            columns = [description[0] for description in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]
    
    def get_category_stats(self, user_id: int, month: int, year: int, transaction_type: str = "expense") -> List[Dict]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT category, SUM(amount) as total, COUNT(*) as count
                FROM transactions 
                WHERE user_id = ? AND type = ? 
                AND strftime('%m', date) = ? AND strftime('%Y', date) = ?
                GROUP BY category
                ORDER BY total DESC
            ''', (user_id, transaction_type, f"{month:02d}", str(year)))
            
            columns = [description[0] for description in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]
    
    def add_default_categories(self, user_id: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        default_categories = [
            # –†–∞—Å—Ö–æ–¥—ã
            ("–µ–¥–∞", "üçï", "expense"),
            ("—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üöó", "expense"),
            ("—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üéÆ", "expense"),
            ("–ø–æ–∫—É–ø–∫–∏", "üõí", "expense"),
            ("–∂–∏–ª—å–µ", "üè†", "expense"),
            ("–∑–¥–æ—Ä–æ–≤—å–µ", "üíä", "expense"),
            # –î–æ—Ö–æ–¥—ã
            ("–∑–∞—Ä–ø–ª–∞—Ç–∞", "üíº", "income"),
            ("–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "üìà", "income"),
            ("–ø–æ–¥–∞—Ä–∫–∏", "üéÅ", "income"),
            ("–ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞", "üí∞", "income"),
        ]
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            for name, emoji, cat_type in default_categories:
                cursor.execute('''
                    INSERT OR IGNORE INTO categories (user_id, name, emoji, type)
                    VALUES (?, ?, ?, ?)
                ''', (user_id, name, emoji, cat_type))
            conn.commit()
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)"""
        pass

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = FinanceDatabase()