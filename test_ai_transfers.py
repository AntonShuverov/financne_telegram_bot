def test_ai_transfers():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ –ò–ò –ø–∞—Ä—Å–µ—Ä–µ"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ò–ò –ø–µ—Ä–µ–≤–æ–¥—ã...")
    
    try:
        from ai_parser import ai_parser
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã
        methods_to_check = [
            'detect_transfer',
            'parse_transfer', 
            'normalize_bank_name',
            'parse_transaction_or_transfer'
        ]
        
        missing_methods = []
        for method in methods_to_check:
            if not hasattr(ai_parser, method):
                missing_methods.append(method)
        
        if missing_methods:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã: {missing_methods}")
            print("üí° –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Ç–æ–¥—ã –≤ ai_parser.py")
            return False
        
        print("‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞–π–¥–µ–Ω—ã –≤ ai_parser")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        transfer_messages = [
            "–ø–µ—Ä–µ–≤–µ–ª —Å –∫–∞—Å–ø–∏ –Ω–∞ —Ö–∞–ª—ã–∫ 50000",
            "—Å–Ω—è–ª —Å —Ö–∞–ª—ã–∫–∞ 25000 –Ω–∞–ª–∏—á–Ω—ã–º–∏",
            "–ø–æ–ø–æ–ª–Ω–∏–ª –∫–∞—Å–ø–∏ 30000",
            "–∫—É–ø–∏–ª –∫–æ—Ñ–µ 800 —Ç–≥"  # –Ω–µ –ø–µ—Ä–µ–≤–æ–¥
        ]
        
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤:")
        for msg in transfer_messages:
            is_transfer = ai_parser.detect_transfer(msg)
            status = "‚úÖ –ü–ï–†–ï–í–û–î" if is_transfer else "‚ùå –ù–ï –ü–ï–†–ï–í–û–î"
            print(f"   '{msg}' ‚Üí {status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–Ω–∫–æ–≤
        print("\nüè¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –±–∞–Ω–∫–æ–≤:")
        bank_tests = [
            ("–∫–∞—Å–ø–∏", "kaspi"),
            ("Halyk Bank", "halyk"), 
            ("–Ω–∞–ª–∏—á–Ω—ã–µ", "–Ω–∞–ª–∏—á–Ω—ã–µ"),
            ("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫", "–¥—Ä—É–≥–æ–µ")
        ]
        
        for input_bank, expected in bank_tests:
            result = ai_parser.normalize_bank_name(input_bank)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"   '{input_bank}' ‚Üí '{result}' {status}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    if test_ai_transfers():
        print("üéâ –¢–µ—Å—Ç –ò–ò –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ü–†–û–ô–î–ï–ù!")
    else:
        print("üí• –¢–µ—Å—Ç –ò–ò –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ü–†–û–í–ê–õ–ï–ù!")
        